----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    12:53:34 09/20/2013 
-- Design Name: 
-- Module Name:    processor - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity processor is
	generic ( WIDTH    : integer := 2; N:NATURAL);--used to enumerate number of states
    Port (  
	 clk: in std_logic;
	 reset: in std_logic;
	 processor_enable : in  STD_LOGIC;
	 	imem_address 		: out  STD_LOGIC_VECTOR (N-1 downto 0);
		imem_data_in 		: in  STD_LOGIC_VECTOR (N-1 downto 0);
		dmem_data_in 		: in  STD_LOGIC_VECTOR (N-1 downto 0);
		dmem_address 		: out  STD_LOGIC_VECTOR (N-1 downto 0);
		dmem_address_wr	: out  STD_LOGIC_VECTOR (N-1 downto 0);
		dmem_data_out		: out  STD_LOGIC_VECTOR (N-1 downto 0);
		dmem_write_enable	: out  STD_LOGIC
	 
	 );
end processor;

architecture Behavioral of processor is
 signal state : std_logic_vector(2 downto 0);
 signal increment: std_logic; --connects to program counter, if 1, then counter will increment on rising edge.
 signal MemWrite,MemRead,branch,jump: std_logic;--signals from the most significant bit of the instruction data, needed for state machine

begin
  STATE_MACHINE : process(clk, reset, MemWrite, MemRead, branch, jump)--press reset in order to start the first state which I have decided to be "Fetch"
  constant STALL : std_logic_vector(0 to WIDTH-1) := "00";
  constant EXECUTE : std_logic_vector(0 to WIDTH-1) := "01";
  constant FETCH  : std_logic_vector(0 to WIDTH-1) := "10";
  begin
  
  if(rising_edge(clk))then
  if(reset='1') then
  state<=FETCH;
  else
  case state is 
  when FETCH=> state<=EXECUTE;
  increment<='1'; --increment address by 1 unit. initiate when execute or stall is done
  when STALL => state<=FETCH;--. (after 1 cycle, go to fetch) stall means that we wont increment the adress. initiate if instruction fetched is load stor or branch. route in the controlsignals which determine what instruction is currently running 
  when EXECUTE=> if(MemWrite='1' or MemRead='1' or branch='1' or jump='1')then state<=STALL; else state<=FETCH; -- initiate after fetch, if instruction is store, load or branch, go to stall, else go to fetch.  After 1 cycle, go to fetch or stall.
 
  end if;
  end case;
  end if;
  end if;
  end process;
  

end Behavioral;

